#!/usr/bin/env bash
#set -x

# Load variable file
SC=.env
if [ -f $SC ] ; then
  source $SC
else
  echo "Missing $SC file" ; exit 1
fi

LANG_OPT=`if [ -z "$LANGUAGE" ]; then echo ""; else echo "-a lang=$LANGUAGE"; fi`

TOP_LEVEL=$(git rev-parse --show-toplevel)
CUR_DIR=$(pwd)

ADOC_CMD="asciidoctor-pdf \
    ${LANG_OPT} \
    --verbose \
    -r asciidoctor-diagram \
    --failure-level=WARN"

CUR_WORK_PTH="${BASH_SOURCE[0]}"
CUR_WORK_SCT="${CUR_WORK_PTH##*/}"

RUN_CODE=250

# Usage Function
# Defines the Usage output
function USAGE() {
  USAGE_ARR=(
    "# Usage for ${CUR_WORK_SCT}"
    ""
    "   ${CUR_WORK_SCT} [options] [arguments]"
    ""
    "   OPTIONAL ARGUMENTS:"
    ""
    "     -l    Provide -l <LANGUAGE> for the language of the generated document"
    "              (legacy option) --lang=<LANGUAGE>, <LANGUAGE>"
    "              languages available are inside locale dir"
    ""
    "     -f    Provide -f <INPUT> for the desired input name of the report if"
    "              differing from document.adoc"
    "              (legacy option) --name=<NAME>, <NAME>"
    ""
    "     -o    Provide -o <OUTPUT> to the desired output PDF document name"
    "              NOTE: this script automaticaly appends \".pdf\""
    ""
    "     -a|--adoc    Try to generate using the local asciidoctor-pdf software"
    ""
    "     -p|--podman  Try to generate using Podman"
    ""
    "     -d|--docker  Try to generate using Docker"
    ""
    "     -h,--help"
    "           Prints this help usage message."
    ""
  )
}

# Cleaning character strings
function str_expurgation() {
  echo $1 | tr ' <>{}()[]Ã©\'\' '_' | sed "s:':\\\':"
}

# Function to use Podman
function runpodman() {
  if command -v podman > /dev/null ; then
    echo "Generating pdf using podman... "
    podman run --rm --name asciidoctor \
      --userns=keep-id \
      --user="$(id -u):$(id -g)" \
      -v "${TOP_LEVEL}/:/documents:Z" \
      -w "/documents" \
          ${IMAGE} \
      sh -c "${ADOC_CMD} \
      -I /documents/addons/gems/prawn-forms-0.1/lib \
      -r /documents/addons/prawn-forms-block.rb \
      -a ej-base-dir=/documents/ \
      -a ej-projectdir=\"/documents\" \
         \"${REPORTNAME}\""
    GENERATE_PDF_EXIT_CODE=$?
    RUN_CODE=0
  else
    GENERATE_PDF_EXIT_CODE=2
  fi
}

# Function to use Docker
function rundocker() {
  if command -v docker > /dev/null ; then
    echo "Generating pdf using docker... "
    docker run --rm --name asciidoctor \
        -v "${TOP_LEVEL}/:/documents/" \
        -w "/documents" \
        -u root \
        ${IMAGE} \
          sh -c "${ADOC_CMD} \
                -I /documents/addons/gems/prawn-forms-0.1/lib \
                -r /documents/addons/prawn-forms-block.rb \
                -r /documents/addons/asciidoctor-list.rb \
                -a ej-base-dir=/documents/ \
                -a ej-projectdir=\"/documents\" \
                \"${REPORTNAME}\""
    GENERATE_PDF_EXIT_CODE=$?
    RUN_CODE=0
  else
    GENERATE_PDF_EXIT_CODE=3
  fi
}

# Function to run with local asciidoctor-pdf installation
function runadocpdf() {
  if command -v  asciidoctor-pdf > /dev/null ; then
    echo "generate pdf using local command"
    ${ADOC_CMD} \
        -I ${TOP_LEVEL}/addons/gems/prawn-forms-0.1/lib \
        -r ${TOP_LEVEL}/addons/prawn-forms-block.rb \
        -a reportdir="${CUR_DIR}" \
        -a ej-base-dir="${TOP_LEVEL}" \
        "${REPORTNAME}"
    GENERATE_PDF_EXIT_CODE=$?
  else
    GENERATE_PDF_EXIT_CODE=4
  fi
}

## Starting the script ##
USAGE

while [ -n "$1" ] ; do
  case "$1" in
    -l          ) LANGUAGE=$2 ; shift  ;;
    -f          ) INPUT=$2 ; shift ;;
    -o          ) OUTPUT=$2 ; shift ;;
    -a|--adoc   ) GENERATE=A ;;
    -p|--podman ) GENERATE=P ;;
    -d|--docker ) GENERATE=D ;;
    --lang=*    ) LANGUAGE=$(echo $1 | cut -d'=' -f 2) ;;
    --name=*    ) INPUT=$(echo $1 | cut -d'=' -f 2) ;;
    -h|--help   ) printf "%s\n" "${USAGE_ARR[@]}"
                  exit 0
                ;;
    *           ) printf "%s\n" "${USAGE_ARR[@]}" "Unknown option $1"
                  exit 1
                ;;
  esac
  shift
done

# Check if .adoc file exists
if [ ! -f "${INPUT}" ] || [ -z "${INPUT}" ]; then
  INPUT=${FILENAME}
fi

# Execution for asciidoc file
if [ "${INPUT}" ] ; then
  if [ "${OUTPUT}" ] ; then
    OUTFILE="${OUTPUT}.pdf"
  else
    # Get the revision number and the project name
    REV_NUMBER=$(str_expurgation $(sed -En 's/^:revnumber: (.*)/\1/p' vars/document-vars.adoc))
    PROJECT_NAME=$(str_expurgation "$(sed -En 's/^:subject: (.*)/\1/p' vars/document-vars.adoc)")
    echo $PROJECT_NAME
    OUTFILE="${PROJECT_NAME}_${REV_NUMBER}.pdf"
  fi
  REPORTNAME=$INPUT
  ADOC_CMD="$ADOC_CMD --out-file ${OUTFILE}"

  if [ "${GENERATE}" = "P" ] ; then
    runpodman
  elif [ "${GENERATE}" = "D" ] ; then
    rundocker
  elif [ "$GENERATE" = "A" ] ; then
    runadocpdf
  else
    runpodman
    [ "${RUN_CODE}" -eq "250" ] && rundocker
    [ "${RUN_CODE}" -eq "250" ] && runadocpdf
  fi

  case "${GENERATE_PDF_EXIT_CODE}" in
      0) echo "Generated: ${OUTFILE}" ;;
      1) echo "ERROR: Something went wrong with PDF generation, see output" ;;
      2) echo "ERROR: Podman not found, please use other option." ;;
      3) echo "ERROR: Docker not found, please use other option." ;;
      4) printf "ERROR: asciidoctor-pdf not found. \n\nasciidoctor-pdf is required to generate the PDF. Please follow the \ninstructions found at: \n  https://source.redhat.com/groups/public/kmo/engagementjournalstandardization" ;;
      125) echo "ERROR: Attempted to use docker but Docker daemon wasn't running" ;;
      *) echo "ERROR: Something unknown went wrong" ;;
  esac
fi

exit $GENERATE_PDF_EXIT_CODE